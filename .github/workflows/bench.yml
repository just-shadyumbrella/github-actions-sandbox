name: Benchmark cloud remotes connection
on: [workflow_dispatch]
jobs:
  benchmark:
    runs-on: ubuntu-latest
    steps:
      - name: Setup Rclone
        uses: AnimMouse/setup-rclone@v1
        with:
          rclone_config: ${{ secrets.RCLONE_CONFIG }}

      - name: Check rclone connection
        run: curl -fssL https://github.com/yaudahj/github-actions-sandbox/raw/refs/heads/main/check_remotes.sh | bash

      - name: Run benchmark
        run: |
          # Create benchmark script and make it executable
          cat > benchmark_remotes.sh << 'EOF'
          #!/bin/bash

          # Benchmark script for testing rclone upload performance to various cloud remotes
          # This script will download a test file and upload it to each configured remote

          set -e  # Exit on error

          # Create directory for benchmark results
          mkdir -p ./benchmark_results

          # Color output for better readability
          GREEN='\033[0;32m'
          RED='\033[0;31m'
          YELLOW='\033[0;33m'
          NC='\033[0m' # No Color

          echo "=== Starting Cloud Remotes Benchmark ==="

          # Get list of configured remotes
          REMOTES=$(rclone listremotes)
          if [ -z "$REMOTES" ]; then
              echo -e "${RED}No remotes configured in rclone. Please check your configuration.${NC}"
              exit 1
          fi

          # Download test file if it doesn't exist
          TEST_FILE="bbb_sunflower_2160p_60fps_normal.mp4.zip"
          if [ ! -f "$TEST_FILE" ]; then
              echo -e "${YELLOW}Downloading test file: $TEST_FILE${NC}"
              curl -L -o "$TEST_FILE" "https://download.blender.org/demo/movies/BBB/bbb_sunflower_2160p_60fps_normal.mp4.zip"
              if [ $? -ne 0 ]; then
                  echo -e "${RED}Failed to download test file!${NC}"
                  exit 1
              fi
          fi

          # Get file size for calculation of transfer rate
          FILE_SIZE=$(du -b "$TEST_FILE" | cut -f1)
          FILE_SIZE_MB=$(echo "scale=2; $FILE_SIZE/1048576" | bc)
          echo -e "Test file size: ${YELLOW}${FILE_SIZE_MB} MB${NC}"

          # Run benchmark for each remote
          echo "=== Running upload benchmark for each remote ==="

          for REMOTE in $REMOTES; do
              REMOTE_NAME="${REMOTE%:}"
              LOG_FILE="./benchmark_results/${REMOTE_NAME}_benchmark.log"
              RESULT_FILE="./benchmark_results/${REMOTE_NAME}_result.txt"
              
              echo -e "\nTesting remote: ${YELLOW}$REMOTE_NAME${NC}"
              echo "Remote: $REMOTE_NAME" > "$RESULT_FILE"
              
              # Try to create a test directory for the benchmark
              echo "Creating test directory..."
              if ! rclone mkdir "${REMOTE}benchmark_test"; then
                  echo -e "${RED}Failed to create directory in remote $REMOTE_NAME. Skipping.${NC}"
                  echo "Status: FAILED - Could not create directory" >> "$RESULT_FILE"
                  continue
              fi
              
              # Start timer
              START_TIME=$(date +%s.%N)
              
              # Upload test file to remote
              echo "Uploading test file..."
              if rclone copy "$TEST_FILE" "${REMOTE}benchmark_test/" --progress 2>&1 | tee "$LOG_FILE"; then
                  # End timer and calculate duration
                  END_TIME=$(date +%s.%N)
                  DURATION=$(echo "$END_TIME - $START_TIME" | bc)
                  DURATION_FORMATTED=$(printf "%.2f" $DURATION)
                  
                  # Calculate upload speed in MB/s
                  SPEED=$(echo "scale=2; $FILE_SIZE_MB / $DURATION" | bc)
                  
                  echo -e "${GREEN}Upload to $REMOTE_NAME completed successfully!${NC}"
                  echo -e "Time taken: ${YELLOW}${DURATION_FORMATTED} seconds${NC}"
                  echo -e "Upload speed: ${YELLOW}${SPEED} MB/s${NC}"
                  
                  # Save results
                  echo "Status: SUCCESS" >> "$RESULT_FILE"
                  echo "Upload Time: $DURATION_FORMATTED seconds" >> "$RESULT_FILE"
                  echo "Upload Speed: $SPEED MB/s" >> "$RESULT_FILE"
              else
                  echo -e "${RED}Upload to $REMOTE_NAME failed!${NC}"
                  echo "Status: FAILED - Upload error" >> "$RESULT_FILE"
              fi
              
              # Clean up (remove the uploaded test file from remote)
              echo "Cleaning up remote..."
              rclone purge "${REMOTE}benchmark_test/" --quiet
          done

          echo -e "\n=== Benchmark completed! Results saved in ./benchmark_results/ ==="
          EOF
          
          chmod +x benchmark_remotes.sh
          ./benchmark_remotes.sh

      - name: Results
        run: |
          # Create results script and make it executable
          cat > format_results.sh << 'EOF'
          #!/bin/bash

          # Results formatting script for rclone benchmarks
          # This script processes benchmark results and displays them in a formatted table

          echo "=== Cloud Remotes Benchmark Results ==="
          echo

          # Create header for the results table
          printf "%-20s | %-10s | %-20s | %-15s\n" "Remote" "Status" "Upload Time" "Upload Speed"
          printf "%-20s-+-%-10s-+-%-20s-+-%-15s\n" "--------------------" "----------" "--------------------" "---------------"

          # Process each result file
          for RESULT_FILE in ./benchmark_results/*_result.txt; do
              if [ -f "$RESULT_FILE" ]; then
                  # Extract remote name from filename
                  FILENAME=$(basename "$RESULT_FILE")
                  REMOTE_NAME="${FILENAME%_result.txt}"
                  
                  # Extract data from result file
                  STATUS=$(grep "Status:" "$RESULT_FILE" | cut -d ":" -f2- | xargs)
                  UPLOAD_TIME=$(grep "Upload Time:" "$RESULT_FILE" | cut -d ":" -f2- | xargs)
                  UPLOAD_SPEED=$(grep "Upload Speed:" "$RESULT_FILE" | cut -d ":" -f2- | xargs)
                  
                  # Set default values if not found
                  UPLOAD_TIME=${UPLOAD_TIME:-"N/A"}
                  UPLOAD_SPEED=${UPLOAD_SPEED:-"N/A"}
                  
                  # Apply colors based on status
                  if [[ "$STATUS" == SUCCESS* ]]; then
                      STATUS_COLORED="\033[0;32m$STATUS\033[0m"  # Green for success
                  else
                      STATUS_COLORED="\033[0;31m$STATUS\033[0m"  # Red for failure
                  fi
                  
                  # Print formatted result with color
                  printf "%-20s | $STATUS_COLORED%-10s\033[0m | %-20s | %-15s\n" "$REMOTE_NAME" "" "$UPLOAD_TIME" "$UPLOAD_SPEED"
              fi
          done

          echo
          echo "=== End of Benchmark Results ==="

          # Create a GitHub Actions output summary for better visibility in the Actions UI
          if [ -n "$GITHUB_STEP_SUMMARY" ]; then
              {
                  echo "## Cloud Remotes Benchmark Results"
                  echo
                  echo "| Remote | Status | Upload Time | Upload Speed |"
                  echo "| ------ | ------ | ----------- | ----------- |"
                  
                  for RESULT_FILE in ./benchmark_results/*_result.txt; do
                      if [ -f "$RESULT_FILE" ]; then
                          FILENAME=$(basename "$RESULT_FILE")
                          REMOTE_NAME="${FILENAME%_result.txt}"
                          
                          STATUS=$(grep "Status:" "$RESULT_FILE" | cut -d ":" -f2- | xargs)
                          UPLOAD_TIME=$(grep "Upload Time:" "$RESULT_FILE" | cut -d ":" -f2- | xargs)
                          UPLOAD_SPEED=$(grep "Upload Speed:" "$RESULT_FILE" | cut -d ":" -f2- | xargs)
                          
                          UPLOAD_TIME=${UPLOAD_TIME:-"N/A"}
                          UPLOAD_SPEED=${UPLOAD_SPEED:-"N/A"}
                          
                          echo "| $REMOTE_NAME | $STATUS | $UPLOAD_TIME | $UPLOAD_SPEED |"
                      fi
                  done
              } >> "$GITHUB_STEP_SUMMARY"
          fi
          EOF
          
          chmod +x format_results.sh
          ./format_results.sh
